// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: GoLangLexer.flex

/*
 * This class is a simple lexer.
*/

package Code;

@SuppressWarnings("fallthrough")
class GoLangLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\12\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\0\17\32\1\33\12\32"+
    "\1\34\1\0\1\35\1\0\1\36\1\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\32"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\32\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\32"+
    "\1\66\1\67\1\70\7\0\1\3\44\0\1\36\12\0"+
    "\1\36\4\0\1\36\5\0\27\36\1\0\37\36\1\0"+
    "\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36\1\0"+
    "\1\36\21\0\165\36\1\0\2\36\2\0\4\36\1\0"+
    "\1\36\6\0\1\36\1\0\3\36\1\0\1\36\1\0"+
    "\24\36\1\0\123\36\1\0\213\36\1\0\255\36\1\0"+
    "\46\36\2\0\1\36\6\0\51\36\10\0\55\36\1\0"+
    "\1\36\1\0\2\36\1\0\2\36\1\0\1\36\10\0"+
    "\33\36\4\0\4\36\35\0\13\36\5\0\112\36\4\0"+
    "\146\36\1\0\10\36\2\0\12\36\1\0\23\36\2\0"+
    "\1\36\20\0\73\36\2\0\145\36\16\0\66\36\4\0"+
    "\1\36\2\0\1\36\2\0\56\36\22\0\34\36\4\0"+
    "\13\36\65\0\25\36\1\0\10\36\25\0\17\36\1\0"+
    "\201\36\2\0\12\36\1\0\23\36\1\0\10\36\2\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\1\36\3\0"+
    "\4\36\2\0\11\36\2\0\2\36\2\0\4\36\10\0"+
    "\1\36\4\0\2\36\1\0\5\36\2\0\14\36\12\0"+
    "\1\36\1\0\1\36\2\0\3\36\1\0\6\36\4\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\2\36\1\0\2\36\2\0\1\36\1\0\5\36\4\0"+
    "\2\36\2\0\3\36\3\0\1\36\7\0\4\36\1\0"+
    "\1\36\7\0\20\36\13\0\3\36\1\0\11\36\1\0"+
    "\3\36\1\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\5\36\2\0\12\36\1\0\3\36\1\0\3\36\2\0"+
    "\1\36\17\0\4\36\2\0\12\36\11\0\7\36\1\0"+
    "\3\36\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\2\0\11\36\2\0"+
    "\2\36\2\0\3\36\10\0\2\36\4\0\2\36\1\0"+
    "\5\36\2\0\12\36\1\0\1\36\20\0\2\36\1\0"+
    "\6\36\3\0\3\36\1\0\4\36\3\0\2\36\1\0"+
    "\1\36\1\0\2\36\3\0\2\36\3\0\3\36\3\0"+
    "\14\36\4\0\5\36\3\0\3\36\1\0\4\36\2\0"+
    "\1\36\6\0\1\36\16\0\12\36\20\0\15\36\1\0"+
    "\3\36\1\0\27\36\1\0\20\36\3\0\10\36\1\0"+
    "\3\36\1\0\4\36\7\0\2\36\1\0\3\36\5\0"+
    "\4\36\2\0\12\36\20\0\4\36\1\0\10\36\1\0"+
    "\3\36\1\0\27\36\1\0\12\36\1\0\5\36\2\0"+
    "\11\36\1\0\3\36\1\0\4\36\7\0\2\36\7\0"+
    "\1\36\1\0\4\36\2\0\12\36\1\0\2\36\15\0"+
    "\4\36\1\0\10\36\1\0\3\36\1\0\63\36\1\0"+
    "\3\36\1\0\5\36\5\0\4\36\7\0\5\36\2\0"+
    "\12\36\12\0\6\36\2\0\2\36\1\0\22\36\3\0"+
    "\30\36\1\0\11\36\1\0\1\36\2\0\7\36\3\0"+
    "\1\36\4\0\6\36\1\0\1\36\1\0\10\36\6\0"+
    "\12\36\2\0\2\36\15\0\72\36\5\0\17\36\1\0"+
    "\12\36\47\0\2\36\1\0\1\36\1\0\5\36\1\0"+
    "\30\36\1\0\1\36\1\0\27\36\2\0\5\36\1\0"+
    "\1\36\1\0\6\36\2\0\12\36\2\0\4\36\40\0"+
    "\1\36\27\0\2\36\6\0\12\36\13\0\1\36\1\0"+
    "\1\36\1\0\1\36\4\0\12\36\1\0\44\36\4\0"+
    "\24\36\1\0\22\36\1\0\44\36\11\0\1\36\71\0"+
    "\112\36\6\0\116\36\2\0\46\36\1\0\1\36\5\0"+
    "\1\36\2\0\53\36\1\0\115\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\51\36\1\0"+
    "\4\36\2\0\41\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\17\36\1\0\71\36\1\0"+
    "\4\36\2\0\103\36\2\0\3\36\40\0\20\36\20\0"+
    "\126\36\2\0\6\36\3\0\u016c\36\2\0\21\36\1\0"+
    "\32\36\5\0\113\36\3\0\13\36\7\0\15\36\1\0"+
    "\7\36\13\0\25\36\13\0\24\36\14\0\15\36\1\0"+
    "\3\36\1\0\2\36\14\0\124\36\3\0\1\36\4\0"+
    "\2\36\2\0\12\36\41\0\3\36\2\0\12\36\6\0"+
    "\131\36\7\0\53\36\5\0\106\36\12\0\37\36\1\0"+
    "\14\36\4\0\14\36\12\0\50\36\2\0\5\36\13\0"+
    "\54\36\4\0\32\36\6\0\12\36\46\0\34\36\4\0"+
    "\77\36\1\0\35\36\2\0\13\36\6\0\12\36\15\0"+
    "\1\36\10\0\17\36\101\0\114\36\4\0\12\36\21\0"+
    "\11\36\14\0\164\36\14\0\70\36\10\0\12\36\3\0"+
    "\61\36\2\0\11\36\7\0\53\36\2\0\3\36\20\0"+
    "\3\36\1\0\47\36\5\0\372\36\1\0\33\36\2\0"+
    "\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0"+
    "\65\36\1\0\7\36\1\0\1\36\3\0\3\36\1\0"+
    "\7\36\3\0\4\36\2\0\6\36\4\0\15\36\5\0"+
    "\3\36\1\0\7\36\53\0\2\3\25\0\2\36\23\0"+
    "\1\36\34\0\1\36\15\0\1\36\20\0\15\36\63\0"+
    "\41\36\21\0\1\36\4\0\1\36\2\0\12\36\1\0"+
    "\1\36\3\0\5\36\6\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\4\36\1\0\13\36\2\0\4\36\5\0"+
    "\5\36\4\0\1\36\21\0\51\36\u022d\0\64\36\26\0"+
    "\57\36\1\0\57\36\1\0\205\36\6\0\11\36\14\0"+
    "\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0"+
    "\1\36\17\0\30\36\11\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\40\36\57\0\1\36\325\0"+
    "\3\36\31\0\17\36\1\0\5\36\2\0\5\36\4\0"+
    "\126\36\2\0\2\36\2\0\3\36\1\0\132\36\1\0"+
    "\4\36\5\0\53\36\1\0\136\36\21\0\33\36\65\0"+
    "\306\36\112\0\360\36\20\0\215\36\103\0\56\36\2\0"+
    "\15\36\3\0\34\36\24\0\63\36\1\0\12\36\1\0"+
    "\163\36\45\0\11\36\2\0\147\36\2\0\65\36\2\0"+
    "\5\36\60\0\61\36\30\0\64\36\14\0\106\36\12\0"+
    "\12\36\6\0\30\36\3\0\1\36\1\0\61\36\2\0"+
    "\44\36\14\0\35\36\3\0\101\36\16\0\13\36\6\0"+
    "\37\36\1\0\67\36\11\0\16\36\2\0\12\36\6\0"+
    "\27\36\3\0\111\36\30\0\3\36\2\0\20\36\2\0"+
    "\5\36\12\0\6\36\2\0\6\36\2\0\6\36\11\0"+
    "\7\36\1\0\7\36\1\0\53\36\1\0\14\36\10\0"+
    "\173\36\1\0\2\36\2\0\12\36\6\0\244\36\14\0"+
    "\27\36\4\0\61\36\4\0\u0100\3\156\36\2\0\152\36"+
    "\46\0\7\36\14\0\5\36\5\0\14\36\1\0\15\36"+
    "\1\0\5\36\1\0\1\36\1\0\2\36\1\0\2\36"+
    "\1\0\154\36\41\0\153\36\22\0\100\36\2\0\66\36"+
    "\50\0\14\36\4\0\20\36\20\0\20\36\3\0\2\36"+
    "\30\0\3\36\40\0\5\36\1\0\207\36\23\0\12\36"+
    "\7\0\32\36\4\0\1\36\1\0\32\36\13\0\131\36"+
    "\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36"+
    "\43\0\14\36\1\0\32\36\1\0\23\36\1\0\2\36"+
    "\1\0\17\36\2\0\16\36\42\0\173\36\105\0\65\36"+
    "\210\0\1\36\202\0\35\36\3\0\61\36\17\0\1\36"+
    "\37\0\40\36\15\0\36\36\5\0\53\36\5\0\36\36"+
    "\2\0\44\36\4\0\10\36\1\0\5\36\52\0\236\36"+
    "\2\0\12\36\6\0\44\36\4\0\44\36\4\0\50\36"+
    "\10\0\64\36\234\0\67\36\11\0\26\36\12\0\10\36"+
    "\230\0\6\36\2\0\1\36\1\0\54\36\1\0\2\36"+
    "\3\0\1\36\2\0\27\36\12\0\27\36\11\0\37\36"+
    "\101\0\23\36\1\0\2\36\12\0\26\36\12\0\32\36"+
    "\106\0\70\36\6\0\2\36\100\0\4\36\1\0\2\36"+
    "\5\0\10\36\1\0\3\36\1\0\35\36\2\0\3\36"+
    "\4\0\1\36\40\0\35\36\3\0\35\36\43\0\10\36"+
    "\1\0\36\36\31\0\66\36\12\0\26\36\12\0\23\36"+
    "\15\0\22\36\156\0\111\36\67\0\63\36\15\0\63\36"+
    "\15\0\50\36\10\0\12\36\306\0\35\36\12\0\1\36"+
    "\10\0\41\36\217\0\27\36\11\0\107\36\37\0\12\36"+
    "\17\0\74\36\25\0\31\36\7\0\12\36\6\0\65\36"+
    "\1\0\12\36\4\0\3\36\11\0\44\36\2\0\1\36"+
    "\11\0\105\36\4\0\4\36\3\0\13\36\1\0\1\36"+
    "\43\0\22\36\1\0\45\36\6\0\1\36\101\0\7\36"+
    "\1\0\1\36\1\0\4\36\1\0\17\36\1\0\12\36"+
    "\7\0\73\36\5\0\12\36\6\0\4\36\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36"+
    "\1\0\5\36\1\0\12\36\2\0\2\36\2\0\3\36"+
    "\2\0\1\36\6\0\1\36\5\0\7\36\2\0\7\36"+
    "\3\0\5\36\213\0\113\36\5\0\12\36\4\0\2\36"+
    "\40\0\106\36\1\0\1\36\10\0\12\36\246\0\66\36"+
    "\2\0\11\36\27\0\6\36\42\0\101\36\3\0\1\36"+
    "\13\0\12\36\46\0\71\36\7\0\12\36\66\0\33\36"+
    "\2\0\17\36\4\0\12\36\306\0\73\36\145\0\112\36"+
    "\25\0\1\36\240\0\10\36\2\0\56\36\2\0\10\36"+
    "\1\0\2\36\33\0\77\36\10\0\1\36\10\0\112\36"+
    "\3\0\1\36\42\0\71\36\7\0\11\36\1\0\55\36"+
    "\1\0\11\36\17\0\12\36\30\0\36\36\2\0\26\36"+
    "\1\0\16\36\111\0\7\36\1\0\2\36\1\0\54\36"+
    "\3\0\1\36\1\0\2\36\1\0\11\36\10\0\12\36"+
    "\6\0\6\36\1\0\2\36\1\0\45\36\1\0\2\36"+
    "\1\0\6\36\7\0\12\36\u0136\0\27\36\11\0\232\36"+
    "\146\0\157\36\21\0\304\36\274\0\57\36\321\0\107\36"+
    "\271\0\71\36\7\0\37\36\1\0\12\36\146\0\36\36"+
    "\2\0\5\36\13\0\67\36\11\0\4\36\14\0\12\36"+
    "\11\0\25\36\5\0\23\36\260\0\100\36\200\0\113\36"+
    "\4\0\71\36\7\0\21\36\100\0\2\36\1\0\1\36"+
    "\34\0\370\36\10\0\363\36\15\0\37\36\61\0\3\36"+
    "\21\0\4\36\10\0\u018c\36\4\0\153\36\5\0\15\36"+
    "\3\0\11\36\7\0\12\36\3\0\2\36\306\0\5\36"+
    "\3\0\6\36\10\0\10\36\2\0\7\36\36\0\4\36"+
    "\224\0\3\36\273\0\125\36\1\0\107\36\1\0\2\36"+
    "\2\0\1\36\2\0\2\36\2\0\4\36\1\0\14\36"+
    "\1\0\1\36\1\0\7\36\1\0\101\36\1\0\4\36"+
    "\2\0\10\36\1\0\7\36\1\0\34\36\1\0\4\36"+
    "\1\0\5\36\1\0\1\36\3\0\7\36\1\0\u0154\36"+
    "\2\0\31\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\10\36\2\0\151\36"+
    "\4\0\62\36\10\0\1\36\16\0\1\36\26\0\5\36"+
    "\1\0\17\36\120\0\7\36\1\0\21\36\2\0\7\36"+
    "\1\0\2\36\1\0\5\36\325\0\55\36\3\0\16\36"+
    "\2\0\12\36\4\0\1\36\u0171\0\72\36\6\0\305\36"+
    "\13\0\7\36\51\0\114\36\4\0\12\36\246\0\4\36"+
    "\1\0\33\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\12\36\1\0\4\36\1\0\1\36\1\0\1\36"+
    "\6\0\1\36\4\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\3\36\1\0\2\36\1\0\1\36\2\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\0\1\36\2\0\4\36\1\0\7\36"+
    "\1\0\4\36\1\0\4\36\1\0\1\36\1\0\12\36"+
    "\1\0\21\36\5\0\3\36\1\0\5\36\1\0\21\36"+
    "\164\0\32\36\6\0\32\36\6\0\32\36\166\0\327\36"+
    "\51\0\65\36\13\0\336\36\2\0\u0182\36\16\0\u0131\36"+
    "\37\0\36\36\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\23\1\24\1\25"+
    "\15\23\1\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\4\0\1\34\1\35\1\36\1\37\14\23\1\40\1\41"+
    "\14\23\1\42\1\43\2\0\2\44\1\45\13\23\1\46"+
    "\3\23\1\47\1\50\10\23\1\51\1\0\1\44\1\23"+
    "\1\52\1\53\1\54\1\55\5\23\1\56\2\23\1\57"+
    "\1\60\5\23\1\61\4\23\1\62\2\23\1\63\2\23"+
    "\1\64\1\0\1\23\1\65\3\23\1\66\11\23\1\0"+
    "\1\23\1\67\2\23\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\23\1\77\1\100\2\23\1\101\1\102"+
    "\3\23\1\103\1\23\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\71\0\u011d"+
    "\0\u0156\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u018f\0\u01c8\0\u0201\0\71\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\71\0\71\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\71\0\u063c\0\71\0\71\0\344\0\344\0\71\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\71\0\71\0\71\0\71\0\u0759"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u02e5\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\71\0\71\0\u0cea\0\u0d23\0\71\0\u0d5c\0\u0720"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u02e5\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u02e5\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u02e5\0\u12b4\0\u0cea\0\u12ed\0\u02e5\0\u02e5\0\u02e5"+
    "\0\u02e5\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u02e5\0\u02e5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
    "\0\u02e5\0\u160b\0\u1644\0\u167d\0\u16b6\0\u02e5\0\u16ef\0\u1728"+
    "\0\u02e5\0\u1761\0\u179a\0\u02e5\0\u17d3\0\u180c\0\u02e5\0\u1845"+
    "\0\u187e\0\u18b7\0\u02e5\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u02e5\0\u1b63"+
    "\0\u1b9c\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u02e5"+
    "\0\u1bd5\0\u02e5\0\71\0\u1c0e\0\u1c47\0\u02e5\0\u02e5\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u02e5\0\u1d2b\0\u02e5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\2\1\30\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\30\1\42\2\30"+
    "\1\43\2\30\1\44\1\45\1\46\1\47\1\30\1\50"+
    "\3\30\1\51\1\52\1\53\73\0\1\3\116\0\1\54"+
    "\40\0\2\55\4\0\2\55\1\56\60\55\12\0\1\57"+
    "\102\0\1\60\5\0\2\60\2\0\30\60\21\0\1\61"+
    "\4\0\1\62\67\0\1\63\1\0\1\22\74\0\1\64"+
    "\70\0\1\65\70\0\1\66\70\0\1\67\64\0\1\30"+
    "\5\0\2\30\3\0\27\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\17\30\1\70\7\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\15\30\1\71\10\30"+
    "\1\72\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\1\73\6\30\1\74\5\30\1\75\11\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\4\30\1\76\22\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\12\30"+
    "\1\77\14\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\1\100\11\30\1\101\2\30\1\102\4\30\1\103"+
    "\4\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\15\30\1\104\11\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\5\30\1\105\5\30\1\106\1\107\12\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\1\110"+
    "\26\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\1\111\26\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\1\112\3\30\1\113\15\30\1\114\4\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\4\30\1\115"+
    "\14\30\1\116\2\30\1\117\2\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\26\30\1\120\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\1\121\26\30\1\0"+
    "\1\30\70\0\1\122\14\0\1\123\55\0\16\124\1\125"+
    "\52\124\2\62\1\126\2\62\1\127\63\62\24\0\1\130"+
    "\70\0\1\30\5\0\2\30\3\0\10\30\1\131\16\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\15\30"+
    "\1\132\11\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\21\30\1\133\5\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\20\30\1\134\6\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\1\135\26\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\13\30\1\136"+
    "\1\137\12\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\5\30\1\140\21\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\20\30\1\141\6\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\12\30\1\142\14\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\15\30"+
    "\1\143\11\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\17\30\1\144\7\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\14\30\1\145\12\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\21\30\1\146\5\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\16\30"+
    "\1\147\10\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\21\30\1\150\5\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\16\30\1\151\10\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\2\30\1\152\24\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\14\30"+
    "\1\153\12\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\21\30\1\154\5\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\14\30\1\155\12\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\12\30\1\156\14\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\17\30"+
    "\1\157\7\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\10\30\1\160\16\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\16\30\1\161\10\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\17\30\1\162\7\30"+
    "\1\0\1\30\1\0\16\124\1\163\70\124\1\163\4\124"+
    "\1\164\45\124\2\0\1\126\112\0\1\30\5\0\2\30"+
    "\3\0\14\30\1\165\12\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\12\30\1\166\14\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\4\30\1\167\22\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\4\30"+
    "\1\170\22\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\14\30\1\171\12\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\16\30\1\172\10\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\20\30\1\173\1\174"+
    "\5\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\1\175\3\30\1\176\22\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\4\30\1\177\22\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\12\30\1\200\14\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\1\201"+
    "\26\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\2\30\1\202\24\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\15\30\1\203\11\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\15\30\1\204\11\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\4\30\1\205"+
    "\22\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\11\30\1\206\15\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\6\30\1\207\20\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\22\30\1\210\4\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\4\30\1\211"+
    "\22\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\4\30\1\212\22\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\10\30\1\213\11\30\1\214\4\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\21\30\1\215"+
    "\5\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\4\30\1\216\22\30\1\0\1\30\1\0\16\124\1\163"+
    "\4\124\1\126\45\124\24\0\1\30\5\0\2\30\3\0"+
    "\21\30\1\217\5\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\12\30\1\220\14\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\21\30\1\221\5\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\10\30\1\222"+
    "\16\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\22\30\1\223\4\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\17\30\1\224\7\30\1\0\1\30\7\0"+
    "\1\225\15\0\1\30\5\0\2\30\3\0\27\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\21\30\1\226"+
    "\5\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\21\30\1\227\5\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\17\30\1\230\7\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\17\30\1\231\7\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\1\232\26\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\4\30"+
    "\1\233\22\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\17\30\1\234\7\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\2\30\1\235\24\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\14\30\1\236\12\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\2\30"+
    "\1\237\24\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\2\30\1\240\24\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\12\30\1\241\14\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\4\30\1\242\22\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\14\30"+
    "\1\243\12\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\12\30\1\244\14\30\1\0\1\30\50\0\1\245"+
    "\45\0\1\30\5\0\2\30\3\0\7\30\1\246\17\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\21\30"+
    "\1\247\5\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\5\30\1\250\21\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\6\30\1\251\20\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\14\30\1\252\12\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\21\30"+
    "\1\253\5\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\6\30\1\254\20\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\21\30\1\255\5\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\7\30\1\256\17\30"+
    "\1\0\1\30\25\0\1\30\5\0\2\30\3\0\14\30"+
    "\1\257\12\30\1\0\1\30\25\0\1\30\5\0\2\30"+
    "\3\0\25\30\1\260\1\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\22\30\1\261\4\30\1\0\1\30"+
    "\25\0\1\30\5\0\2\30\3\0\21\30\1\262\5\30"+
    "\1\0\1\30\45\0\1\263\50\0\1\30\5\0\2\30"+
    "\3\0\17\30\1\264\7\30\1\0\1\30\25\0\1\30"+
    "\5\0\2\30\3\0\1\265\26\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\4\30\1\266\22\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\4\30\1\267"+
    "\22\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\15\30\1\270\11\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\2\30\1\271\24\30\1\0\1\30\25\0"+
    "\1\30\5\0\2\30\3\0\22\30\1\272\4\30\1\0"+
    "\1\30\25\0\1\30\5\0\2\30\3\0\4\30\1\273"+
    "\22\30\1\0\1\30\25\0\1\30\5\0\2\30\3\0"+
    "\6\30\1\274\20\30\1\0\1\30\25\0\1\30\5\0"+
    "\2\30\3\0\7\30\1\275\17\30\1\0\1\30\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7524];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\2\1\7\11\3\1\1\11"+
    "\5\1\2\11\15\1\1\11\1\1\2\11\1\0\1\1"+
    "\1\11\4\0\4\11\32\1\2\11\2\0\1\11\34\1"+
    "\1\0\41\1\1\0\17\1\1\0\15\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*private boolean _existenTokens = false;
 
    public boolean existenTokens(){
       return this._existenTokens;
    }*/

    /*StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    public String lexeme;*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GoLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public GoToken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+">");
            }
          // fall through
          case 69: break;
          case 2:
            { /* Esta seccion de codigo debe ser un *Ignore* */
        System.out.println("Espacio en blanco");
        GoToken gotoken = new GoToken("WHITESPACE", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 70: break;
          case 3:
            { System.out.println("Operador Not");
        GoToken gotoken = new GoToken("NOT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 71: break;
          case 4:
            { System.out.println("Operador modulo");
        GoToken gotoken = new GoToken("MOD", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 72: break;
          case 5:
            { System.out.println("Apertura parentesis");
        GoToken gotoken = new GoToken("OPPARANTHESIS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 73: break;
          case 6:
            { System.out.println("Cierre Parentesis");
        GoToken gotoken = new GoToken("CLPARENTHESIS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 74: break;
          case 7:
            { System.out.println("Operador multiplicacion");
        GoToken gotoken = new GoToken("MULT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 75: break;
          case 8:
            { System.out.println("Operador suma");
        GoToken gotoken = new GoToken("PLUS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 76: break;
          case 9:
            { System.out.println("Signo coma");
        GoToken gotoken = new GoToken("COMMA", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 77: break;
          case 10:
            { System.out.println("Operador resta");
        GoToken gotoken = new GoToken("MINUS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 78: break;
          case 11:
            { System.out.println("Signo punto");
        GoToken gotoken = new GoToken("DOT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 79: break;
          case 12:
            { System.out.println("Operador division");
        GoToken gotoken = new GoToken("DIV", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 80: break;
          case 13:
            { System.out.println("Integer/Int/Entero: value");
        GoToken gotoken = new GoToken("INT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 81: break;
          case 14:
            { System.out.println("Simbolo dos puntos");
        GoToken gotoken = new GoToken("COLON", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 82: break;
          case 15:
            { System.out.println("Signo punto y coma");
        GoToken gotoken = new GoToken("SEMICOLON", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 83: break;
          case 16:
            { System.out.println("Operador Menor que");
        GoToken gotoken = new GoToken("LESSTH", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 84: break;
          case 17:
            { System.out.println("Operador asignacion 1");
        GoToken gotoken = new GoToken("EQ", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 85: break;
          case 18:
            { System.out.println("Operador Mayor que");
        GoToken gotoken = new GoToken("GREATERTH", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 86: break;
          case 19:
            { System.out.println("Palabra");
        GoToken gotoken = new GoToken("WORD", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 87: break;
          case 20:
            { System.out.println("Apertura Corchetes");
        GoToken gotoken = new GoToken("OPBRACKETS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 88: break;
          case 21:
            { System.out.println("Cierre Corchetes");
        GoToken gotoken = new GoToken("CLBRACKETS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 89: break;
          case 22:
            { System.out.println("Apertura Llaves");
        GoToken gotoken = new GoToken("OPKEYS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 90: break;
          case 23:
            { System.out.println("Booelan/Bool: value");
        GoToken gotoken = new GoToken("BOOL", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 91: break;
          case 24:
            { System.out.println("Cierre Llaves");
        GoToken gotoken = new GoToken("CLKEYS", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 92: break;
          case 25:
            { System.out.println("Operador Diferente de...");
        GoToken gotoken = new GoToken("DIFF", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 93: break;
          case 26:
            { System.out.println("String/Cadena: value");
        GoToken gotoken = new GoToken("STRING", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 94: break;
          case 27:
            { System.out.println("Operador And");
        GoToken gotoken = new GoToken("AND", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 95: break;
          case 28:
            { System.out.println("Operador de asignacion 2");
        GoToken gotoken = new GoToken("EQ", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 96: break;
          case 29:
            { System.out.println("Operador Menor igual");
        GoToken gotoken = new GoToken("LESSEQ", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 97: break;
          case 30:
            { System.out.println("Operador Comparacion");
        GoToken gotoken = new GoToken("EQEQ", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 98: break;
          case 31:
            { System.out.println("Operador Mayor igual");
        GoToken gotoken = new GoToken("GREATEREQ", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 99: break;
          case 32:
            { System.out.println("Go");
    GoToken gotoken = new GoToken("GO", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 100: break;
          case 33:
            { System.out.println("If");
    GoToken gotoken = new GoToken("IF", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 101: break;
          case 34:
            { System.out.println("Operador Or");
        GoToken gotoken = new GoToken("OR", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 102: break;
          case 35:
            { System.out.println("Char/Caracter: value");
        GoToken gotoken = new GoToken("CHAR", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 103: break;
          case 36:
            { /* Esta seccion de codigo debe ser un *Ignore* */
        System.out.println("Comentario");
        GoToken gotoken = new GoToken("COMMENT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 104: break;
          case 37:
            { System.out.println("Double/Float/Decimal: value");
        GoToken gotoken = new GoToken("FLOAT", yytext(), yyline+1, yycolumn);
        return gotoken;
            }
          // fall through
          case 105: break;
          case 38:
            { System.out.println("For");
    GoToken gotoken = new GoToken("FOR", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 106: break;
          case 39:
            { System.out.println("Integer: data taype");
    GoToken gotoken = new GoToken("INT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 107: break;
          case 40:
            { System.out.println("Map");
    GoToken gotoken = new GoToken("MAP", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 108: break;
          case 41:
            { System.out.println("Definicion de variable");
    GoToken gotoken = new GoToken("VAR", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 109: break;
          case 42:
            { System.out.println("Boolean: data type");
    GoToken gotoken = new GoToken("BOOL", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 110: break;
          case 43:
            { System.out.println("Byte: data type");
    GoToken gotoken = new GoToken("BYTE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 111: break;
          case 44:
            { System.out.println("Case");
    GoToken gotoken = new GoToken("CASE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 112: break;
          case 45:
            { System.out.println("Chan");
    GoToken gotoken = new GoToken("CHAN", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 113: break;
          case 46:
            { System.out.println("Else / If-else");
    GoToken gotoken = new GoToken("ELSE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 114: break;
          case 47:
            { System.out.println("Declaracion de funcion");
    GoToken gotoken = new GoToken("FUNC", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 115: break;
          case 48:
            { System.out.println("Goto");
    GoToken gotoken = new GoToken("GOTO", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 116: break;
          case 49:
            { System.out.println("Rune");
    GoToken gotoken = new GoToken("RUNE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 117: break;
          case 50:
            { System.out.println("Type");
    GoToken gotoken = new GoToken("TYPE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 118: break;
          case 51:
            { System.out.println("Const");
    GoToken gotoken = new GoToken("CONST", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 119: break;
          case 52:
            { System.out.println("Defer");
    GoToken gotoken = new GoToken("DEFER", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 120: break;
          case 53:
            { System.out.println("Float: data type");
    GoToken gotoken = new GoToken("FLOAT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 121: break;
          case 54:
            { System.out.println("Range");
    GoToken gotoken = new GoToken("RANGE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 122: break;
          case 55:
            { System.out.println("Importacion de package");
    GoToken gotoken = new GoToken("IMPORT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 123: break;
          case 56:
            { System.out.println("Return");
    GoToken gotoken = new GoToken("RETURN", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 124: break;
          case 57:
            { System.out.println("Select");
    GoToken gotoken = new GoToken("SELECT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 125: break;
          case 58:
            { System.out.println("String: data taype");
    GoToken gotoken = new GoToken("", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 126: break;
          case 59:
            { System.out.println("Struct");
    GoToken gotoken = new GoToken("STRUCT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 127: break;
          case 60:
            { System.out.println("Switch");
    GoToken gotoken = new GoToken("SWITCH", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 128: break;
          case 61:
            { System.out.println("Impresion de linea");
    GoToken gotoken = new GoToken("PRINTLN", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 129: break;
          case 62:
            { System.out.println("Complex: data type");
    GoToken gotoken = new GoToken("COMPLEX", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 130: break;
          case 63:
            { System.out.println("Default");
    GoToken gotoken = new GoToken("DEFAULT", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 131: break;
          case 64:
            { System.out.println("Else if");
    GoToken gotoken = new GoToken("ELSEIF", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 132: break;
          case 65:
            { System.out.println("Deteccion de package");
    GoToken gotoken = new GoToken("PACKAGE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 133: break;
          case 66:
            { System.out.println("Continue");
    GoToken gotoken = new GoToken("CONTINUE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 134: break;
          case 67:
            { System.out.println("Interface");
    GoToken gotoken = new GoToken("INTERFACE", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 135: break;
          case 68:
            { System.out.println("Fallthrougth");
    GoToken gotoken = new GoToken("FALLTHROUGTH", yytext(), yyline+1, yycolumn);
    return gotoken;
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
